defer 是 Go 语言提供的一种用于注册延迟调用的机制，每一次 defer 都会把函数压入栈中，当前函数返回前再把延迟函数取出并执行。

defer 语句并不会马上执行，而是会进入一个栈，函数 return 前，会按先进后出（FILO）的顺序执行。也就是说最先被定义的 defer 语句最后执行。
先进后出的原因是后面定义的函数可能会依赖前面的资源，自然要先执行；否则，如果前面先执行，那后面函数的依赖就没有了。

defer 语句定义时，对外部变量的引用是有两种方式的，分别是作为函数参数和作为闭包引用。作为函数参数，则在 defer 定义时就把值传递给 defer，并被缓存起来；
作为闭包引用的话，则会在 defer 函数真正调用时根据整个上下文确定当前的值。

return语句：
return 并不是一个原子指令，其编译后分为三个步骤
1. 返回值 = xxx
2. 调用 defer 函数
3. 空的 return

要注意的点是如果返回值是非匿名
那么要注意return的变量和defer内修改的变量名是否为同一个变量，如果不同，则返回值不会被改变

如果返回的是匿名
那么return 后的变量将会赋值给一个新的隐式变量，那么defer的值修改是不会影响到最终的返回值
如果想要改变，需要返回一个指针